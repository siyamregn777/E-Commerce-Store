// models/User.ts
import { supabase } from '../../lib/supabaseClient'; // Import the Supabase client
import bcrypt from 'bcrypt';
// Define the User interface
export interface IUser {
  id?: string; // UUID generated by Supabase
  first_name: string;
  last_name: string;
  username: string;
  email: string;
  password: string;
  image?: string; // Optional image field
}

// Function to create a new user in Supabase
export const createUser = async (user: IUser) => {
  try {
    // Hash the password before storing it
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(user.password, salt);

    // Insert the user into the 'users' table
    const { data, error } = await supabase
      .from('users')
      .insert([
        {
          first_name: user.first_name,
          last_name: user.last_name,
          username: user.username,
          email: user.email,
          password: hashedPassword, // Store the hashed password
          image: user.image || 'home.webp', // Default image path
        },
      ])
      .select(); // Use .select() to return the inserted data

    if (error) {
      throw new Error(error.message);
    }

    return data;
  } catch (error) {
    throw error;
  }
};

// Function to find a user by email
export const findUserByEmail = async (email: string) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('email', email);

    if (error) {
      throw new Error(error.message);
    }

    return data.length > 0 ? data[0] : null;
  } catch (error) {
    console.error('Error finding user by email:', error);
    throw error;
  }
};

// Function to find a user by username
export const findUserByUsername = async (username: string) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('username', username);

    if (error) {
      throw new Error(error.message);
    }

    return data.length > 0 ? data[0] : null;
  } catch (error) {
    console.error('Error finding user by username:', error);
    throw error;
  }
};

// Function to find an admin by email
export const findAdminByEmail = async (email: string) => {
  try {
    const { data, error } = await supabase
      .from('admins')
      .select('*')
      .eq('email', email);

    if (error) {
      throw new Error(error.message);
    }

    return data.length > 0 ? data[0] : null;
  } catch (error) {
    console.error('Error finding admin by email:', error);
    throw error;
  }
};

// Function to update a user's profile
export const updateProfile = async (email: string, updates: Partial<IUser>, role?: string) => {
  try {
    let query = supabase
      .from('users')
      .update(updates)
      .eq('email', email);

    // If the caller is an admin, bypass RLS
    if (role === 'admin') {
      query = query.neq('role', 'admin'); // Prevent admins from updating other admins
    }

    const { data, error } = await query.select();

    if (error) {
      throw new Error(error.message);
    }

    return data[0];
  } catch (error) {
    console.error('Error updating profile:', error);
    throw error;
  }
};

// Function to update a user's password
export const updatePassword = async (email: string, newPassword: string) => {
  try {
    // Hash the new password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    // Update the password in the 'users' table
    const { error } = await supabase
      .from('users')
      .update({ password: hashedPassword })
      .eq('email', email);

    if (error) {
      throw new Error(error.message);
    }

    return { message: 'Password updated successfully' };
  } catch (error) {
    throw error;
  }
};

// Function to compare passwords
export const comparePassword = async (plainPassword: string, hashedPassword: string) => {
  return await bcrypt.compare(plainPassword, hashedPassword);
};