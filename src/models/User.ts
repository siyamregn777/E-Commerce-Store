// models/User.ts
import { supabase } from '../../lib/supabaseClient'; // Import the Supabase client
import bcrypt from 'bcrypt';

// Define the User interface
export interface IUser {
  id?: string; // UUID generated by Supabase
  first_name: string;
  last_name: string;
  username: string;
  email: string;
  password: string;
  image?: string; // Optional image field
}

// Function to create a new user in Supabase
export const createUser = async (user: IUser) => {
  try {
    // Hash the password before storing it
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(user.password, salt);

    // Insert the user into the 'users' table
    const { data, error } = await supabase
      .from('users')
      .insert([
        {
          first_name: user.first_name,
          last_name: user.last_name,
          username: user.username,
          email: user.email,
          password: hashedPassword, // Store the hashed password
          image: user.image || '/uploads/default.png', // Default image path
        },
      ])
      .select(); // Use .select() to return the inserted data

    if (error) {
      throw new Error(error.message);
    }

    return data;
  } catch (error) {
    throw error;
  }
};

// Function to find a user by email
export const findUserByEmail = async (email: string) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single();

    if (error) {
      throw new Error(error.message);
    }

    return data;
  } catch (error) {
    throw error;
  }
};

// Function to find a user by username
export const findUserByUsername = async (username: string) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('username', username)
      .single();

    if (error) {
      throw new Error(error.message);
    }

    return data;
  } catch (error) {
    throw error;
  }
};

// Function to compare passwords
export const comparePassword = async (plainPassword: string, hashedPassword: string) => {
  return await bcrypt.compare(plainPassword, hashedPassword);
};