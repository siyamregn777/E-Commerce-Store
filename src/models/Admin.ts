// models/Admin.ts
import { supabase } from '../../lib/supabaseClient'; // Import the Supabase client
import bcrypt from 'bcrypt';

// Define the Admin interface
export interface IAdmin {
  id?: string; // UUID generated by Supabase
  first_name: string;
  last_name: string;
  username: string;
  email: string;
  password: string;
  image?: string; // Optional image field
}

// Function to create a new admin in Supabase
export const createAdmin = async (admin: IAdmin) => {
  try {
    // Hash the password before storing it
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(admin.password, salt);

    // Insert the admin into the 'admins' table
    const { data, error } = await supabase
      .from('admins')
      .insert([
        {
          first_name: admin.first_name,
          last_name: admin.last_name,
          username: admin.username,
          email: admin.email,
          password: hashedPassword, // Store the hashed password
          image: admin.image || '/uploads/default.png', // Default image path
        },
      ])
      .select(); // Use .select() to return the inserted data

    if (error) {
      throw new Error(error.message);
    }

    return data;
  } catch (error) {
    throw error;
  }
};

// Function to find an admin by email
export const findAdminByEmail = async (email: string) => {
  try {
    const { data, error } = await supabase
      .from('admins')
      .select('*')
      .eq('email', email);

    if (error) {
      throw new Error(error.message);
    }

    // Return null if no admin is found
    if (data.length === 0) {
      return null;
    }

    // Return the first admin if multiple are found
    return data[0];
  } catch (error) {
    console.error('Error finding admin by email:', error);
    throw error;
  }
};

// Function to find an admin by username
export const findAdminByUsername = async (username: string) => {
  try {
    const { data, error } = await supabase
      .from('admins')
      .select('*')
      .eq('username', username);

    if (error) {
      throw new Error(error.message);
    }

    // Return null if no admin is found
    if (data.length === 0) {
      return null;
    }

    // Return the first admin if multiple are found
    return data[0];
  } catch (error) {
    console.error('Error finding admin by username:', error);
    throw error;
  }
};

// Function to update admin password
export const updateAdminPassword = async (email: string, newPassword: string) => {
  try {
    // Hash the new password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    // Update the password in the 'admins' table
    const { error } = await supabase
      .from('admins')
      .update({ password: hashedPassword })
      .eq('email', email);

    if (error) {
      throw new Error(error.message);
    }

    return { message: 'Password updated successfully' };
  } catch (error) {
    throw error;
  }
};

// Function to compare passwords
export const compareAdminPassword = async (plainPassword: string, hashedPassword: string) => {
  return await bcrypt.compare(plainPassword, hashedPassword);
};
