import { supabase } from '../../lib/supabaseClient';

export interface IContact {
  id?: string; // UUID generated by Supabase
  name: string;
  email: string;
  subject: string;
  message: string;
  created_at?: string; // Optional: Timestamp
}

// Function to add a new contact
export const addContact = async (contact: IContact) => {
  try {
    const { data, error } = await supabase
      .from('contacts')
      .insert([contact])
      .select();

    if (error) throw new Error(error.message);
    return data ? data[0] : null;
  } catch (error) {
    console.error('Error adding contact:', error);
    throw error;
  }
};

// Function to fetch all contacts
export const fetchContacts = async () => {
  try {
    const { data, error } = await supabase
      .from('contacts')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) throw new Error(error.message);
    return data as IContact[];
  } catch (error) {
    console.error('Error fetching contacts:', error);
    throw error;
  }
};

// Function to delete a contact by ID
export const deleteContact = async (id: string) => {
  try {
    const { error } = await supabase
      .from('contacts')
      .delete()
      .eq('id', id);

    if (error) throw new Error(error.message);
    return true;
  } catch (error) {
    console.error('Error deleting contact:', error);
    throw error;
  }
};